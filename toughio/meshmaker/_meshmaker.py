from __future__ import annotations
from typing import Optional
from numpy.typing import ArrayLike

import numpy as np
import pyvista as pv


def structured_grid(
    dx: ArrayLike,
    dy: ArrayLike,
    dz: Optional[ArrayLike] = None,
    origin: Optional[ArrayLike] = None,
    layer: bool = False,
    material: str = "dfalt",
):
    """
    Generate a 2D or 3D structured grid.

    Parameters
    ----------
    dx : ArrayLike
        Grid spacing along X axis.
    dy : ArrayLike
        Grid spacing along Y axis.
    dz : ArrayLike, optional
        Grid spacing along Z axis. If None, generate a 2D grid.
    origin : ArrayLike, optional
        Coordinates of origin.
    layer : bool, default False
        If True, mesh will be generated by layers.
    material : str, default 'dfalt'
        Default material name.

    Returns
    -------
    :class:`toughio.Mesh`
        Structured grid.

    """
    from .. import Mesh

    dx = np.asarray(dx)
    dy = np.asarray(dy)
    dz = np.asarray(dz) if dz is not None else np.zeros(1)
    origin = origin if origin is not None else (0.0, 0.0, -dz.sum())

    if dx.ndim != 1 or dy.ndim != 1 or dz.ndim != 1:
        raise ValueError("could not initialize structured grid with non 1D arrays")

    if (dx < 0.0).any() or (dy < 0.0).any() or (dz < 0.0).any():
        raise ValueError("could not initialize structured grid with negative grid spacings")

    x = np.insert(dx.cumsum(), 0, 0.0)
    y = np.insert(dy.cumsum(), 0, 0.0)
    z = np.insert(dz.cumsum(), 0, 0.0)
    X, Y, Z = np.meshgrid(x, y, z, indexing="ij")

    if not layer:
        ndim = np.squeeze(X.shape).size

        if ndim == 1:
            axes = (0, 1, 2)

        elif ndim == 2:
            if dx.size == 1:
                axes = (0, 2, 1)

            elif dy.size == 1:
                axes = (2, 1, 0)

            elif dz.size == 1:
                axes = (1, 0, 2)

        elif ndim == 3:
            axes = (2, 1, 0)

        X = X.transpose(axes)
        Y = Y.transpose(axes)
        Z = Z.transpose(axes)
        zaxis = axes.index(2)

    else:
        zaxis = 2

    # Reorder cells from top to bottom
    X = np.flip(X, axis=zaxis)
    Y = np.flip(Y, axis=zaxis)
    Z = np.flip(Z, axis=zaxis)

    grid = pv.StructuredGrid(X, Y, Z).translate(origin)
    grid = grid if origin is not None else grid
    mesh = Mesh(grid)
    mesh.set_material(material)

    return mesh


def cylindric_grid(
    dr: ArrayLike,
    dz: ArrayLike,
    origin_z: Optional[float] = None,
    layer: bool = False,
    material: str = "dfalt",
):
    """
    Generate a cylindric grid as a radial XZ structured grid.

    Parameters
    ----------
    dr : ArrayLike
        Grid spacing along X axis.
    dz : ArrayLike
        Grid spacing along Z axis.
    origin_z : scalar, optional
        Depth of origin.
    layer : bool, default False
        If True, mesh will be generated by layers.
    material : str, default 'dfalt'
        Default material name.

    Returns
    -------
    :class:`toughio.CylindricMesh`
        Cylindric grid.

    """
    from .. import CylindricMesh

    dr = np.asarray(dr)
    dz = np.asarray(dz)
    origin_z = origin_z if origin_z is not None else 0.0

    if dr.ndim != 1 or dz.ndim != 1:
        raise ValueError("could not initialize cylindric grid with non 1D arrays")

    if (dr < 0.0).any() or (dz < 0.0).any():
        raise ValueError("could not initialize cylindric grid with negative grid spacings")

    mesh = structured_grid(
        dr,
        [0.0],
        dz,
        origin=(0.0, 0.0, origin_z),
        layer=layer,
        material=material,
    )

    return CylindricMesh(mesh)
